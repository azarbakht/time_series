acf(resid(temp.lm2))
pacf(resid(temp.lm2))
res.ar <- ar(resid(temp.lm2), method = "mle")
res.ar$ar
sd(res.ar$res[-(1:2)])
acf(res.ar$res[-(1:2)])
library(ggplot2)
load(url("http://www.stat.pitt.edu/stoffer/tsa3/tsa3.rda"))
library(ggplot2)
load(url("http://www.stat.pitt.edu/stoffer/tsa3/tsa3.rda"))
source(url("http://stat565.cwick.co.nz/code/fortify-ts.r"))
qplot(time, x, data = fortify(soi), geom = "line") +
ylab("SOI") + xlab("Year") +
theme_bw(base_size = 24)
spectrum(soi)
# freq = 1, corresponds to 1 cycle per year
# if you use a time series object the x-axis corresponds to cycles per time period
spectrum(fortify(soi)$x)
# freq = 0.1, corresponds to 0.1 cycle per measurement unit = 1 month, ~ 1 cycle/10months
# no log scale, no taper, remove mean not trend
spectrum(soi, log = "no", taper = 0, demean = TRUE, detrend = FALSE)
# if you use a time series object the x-axis corresponds to cycles per time period
spectrum(fortify(soi)$x)
# freq = 0.1, corresponds to 0.1 cycle per measurement unit = 1 month, ~ 1 cycle/10months
# no log scale, no taper, remove mean not trend
spectrum(soi, log = "no", taper = 0, demean = TRUE, detrend = FALSE)
# averaged periodogram (average over 5 values)
spectrum(soi, spans = 5, log = "no", taper = 0)
# if you use the log scale you get a confidence band estimate
spectrum(soi, spans = 5, taper = 0)
spectrum(soi, taper = 0)
# a look at the kernel's spectrum uses
plot(kernel("modified.daniell",  c(2)),  ylim = c(0, 0.3))
plot(kernel("modified.daniell",  c(2, 2)),  ylim = c(0, 0.3))
plot(kernel("modified.daniell",  c(7, 7)),  ylim = c(0, 0.3))
# try some bandwidths
spectrum(soi, taper = 0)
spectrum(soi, spans = c(3, 3), taper = 0)
spectrum(soi, spans = c(5, 5), taper = 0)
spectrum(soi, spans = c(7,7), taper = 0)
spectrum(soi, spans = c(15, 15), taper = 0)
# other examples
# wave tank data C&M
wavetank <- read.table(url("http://staff.elena.aut.ac.nz/Paul-Cowpertwait/ts/wave.dat"),
header = TRUE)
wavetank$time <- seq(1/10, 39.6, 1/10)
qplot(time, waveht, data = wavetank, geom = "line") +
ylab("Waveheight") + xlab("Seconds") +
theme_bw(base_size = 24)
spectrum(wavetank$waveht, taper = 0)
spectrum(wavetank$waveht, taper = 0, spans = c(5, 5))
spectrum(wavetank$waveht, taper = 0, spans = c(3, 3))
spectrum(wavetank$waveht, taper = 0, spans = c(7, 7))
spectrum(wavetank$waveht, taper = 0, spans = c(15, 15))
spectrum(wavetank$waveht, taper = 0, spans = c(21, 21))
# motor data C&M
motor <- read.table(url("http://staff.elena.aut.ac.nz/Paul-Cowpertwait/ts/imotor.txt"),
header = TRUE)
motor$time <- seq(0.0025, 100, 0.0025)
motor$time <- seq(0.0025, 100, 0.0025)
qplot(time, good, data = subset(motor, time < 1), geom = "line")+
theme_bw(base_size = 24)
qplot(time, broken, data = subset(motor, time < 1), geom = "line")+
theme_bw(base_size = 24)
# do both spectrums in a single plot
spectrum(motor$good, taper = 0, span = c(51, 51))
spectrum(motor$broken, taper = 0, span = c(51, 51))
spgood <- spectrum(motor$good, taper = 0, span = c(51, 51))
spbroken <- spectrum(motor$broken, taper = 0, span = c(51, 51))
str(spgood)
names(spgood)
sp_both <- data.frame(freq = c(spgood$freq, spbroken$freq),
spec = c(spgood$spec, spbroken$spec),
motor = rep(c("good", "broken"), c(length(spgood$freq), length(spbroken$freq))))
qplot(freq, spec, data = sp_both, log = "y", geom = "line", linetype = motor)+
xlim(0.1, 0.2)
layout(1:2)
set.seed(1)
x <- rnorm(2048)
spectrum(x, log = c("no"))
spectrum(x, span = 65, log = c("no"))
spectrum(x, span = 605, log = c("no"))
set.seed(1)
x <- rnorm(2048)
spectrum(x, log = c("no"))
spectrum(x, span = 605, log = c("no"))
layout(1:1)
set.seed(1)
x <- rnorm(2048)
spectrum(x, log = c("no"))
spectrum(x, span = 605, log = c("no"))
spectrum(x, span = 65, log = c("no"))
spectrum(x, span = 1605, log = c("no"))
?spectrum
require(graphics)
par(mfrow = c(2,2))
spectrum(lh)
spectrum(lh, spans = 3)
spectrum(lh, spans = c(3,3))
spectrum(lh, spans = c(3,5))
spectrum(ldeaths)
spectrum(ldeaths, spans = c(3,3))
spectrum(ldeaths, spans = c(3,5))
spectrum(ldeaths, spans = c(5,7))
spectrum(ldeaths, spans = c(5,7), log = "dB", ci = 0.8)
# for multivariate examples see the help for spec.pgram
## spec.ar
spectrum(lh, method = "ar")
spectrum(x, span = 2000, log = c("no"))
par(mfrow = c(1,1))
spectrum(lh)
spectrum(x, span = 2000, log = c("no"))
spectrum(x, span = 1, log = c("no"))
spectrum(x, span = 2, log = c("no"))
spectrum(x, span = 5, log = c("no"))
spectrum(x, span = 10, log = c("no"))
spectrum(x, span = 20, log = c("no"))
spectrum(x, span = 65, log = c("no"))
spectrum(x, span = 120, log = c("no"))
spectrum(x, span = 65, log = c("no"))
x.spec <- spectrum (x, span = 65, log = c("no"))
spx <- x.spec$freq / Del
spy <- 2 * x.spec$spec
plot (spx, spy, xlab = "Hz", ylab = "variance/Hz", type = "l")
x.spec <- spectrum (x, span = 65, log = c("no"))
spx <- x.spec$freq / 20
spy <- 2 * x.spec$spec
plot (spx, spy, xlab = "Hz", ylab = "variance/Hz", type = "l")
spectrum(x, span = 65, log = c("no"))
plot (spx, spy, xlab = "Hz", ylab = "variance/Hz", type = "l")
spectrum(x, span = 65, log = c("no"))
plot (spx, spy, xlab = "Hz", ylab = "variance/Hz", type = "l")
spectrum(x, span = 65, log = c("no"))
plot (spx, spy, xlab = "Hz", ylab = "variance/Hz", type = "l")
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# AR(1)
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# WN
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# MA(1)
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# AR(1)
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 0.7
for (t in 2:1024) x[t]<- 0.7 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 0.9
for (t in 2:1024) x[t]<- 0.9 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 0.7
for (t in 2:1024) x[t]<- 0.7 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# MA(1)
set.seed(1)
x <- w <- rnorm(1024)
# beta = 0.9
for (t in 2:1024) x[t]<- 0.9 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 0.7
for (t in 2:1024) x[t]<- 0.7 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 0.5
for (t in 2:1024) x[t]<- 0.5 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 0.3
for (t in 2:1024) x[t]<- 0.3 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 3
for (t in 2:1024) x[t]<- 3 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# beta = 1
for (t in 2:1024) x[t]<- 1 * w[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
# AR(1)
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
set.seed(1)
x <- rnorm(2048)
spectrum(x, log = c("no"))
spectrum(x, span = 65, log = c("no"))
?spectrum
spectrum(x, log = c("no"))
spectrum(x, span = 65, log = c("no"))
load(url("http://stat565.cwick.co.nz/data/flow_df.rda"))
qplot(time, log(flow), data = flow_df, geom = "line")
soi <- log(flow)
attach(flow_df)
soi <- log(flow)
spectrum(soi)
spectrum(soi)
# freq = 1, corresponds to 1 cycle per year
# if you use a time series object the x-axis corresponds to cycles per time period
spectrum(fortify(soi)$x)
spectrum(soi, log = "no", taper = 0, demean = TRUE, detrend = FALSE)
# averaged periodogram (average over 5 values)
spectrum(soi, spans = 5, log = "no", taper = 0)
# if you use the log scale you get a confidence band estimate
spectrum(soi, spans = 5, taper = 0)
spectrum(soi, taper = 0)
# a look at the kernel's spectrum uses
plot(kernel("modified.daniell",  c(2)),  ylim = c(0, 0.3))
plot(kernel("modified.daniell",  c(2, 2)),  ylim = c(0, 0.3))
plot(kernel("modified.daniell",  c(7, 7)),  ylim = c(0, 0.3))
# try some bandwidths
# try some bandwidths
spectrum(soi, taper = 0)
spectrum(soi, spans = c(3, 3), taper = 0)
spectrum(soi, spans = c(5, 5), taper = 0)
spectrum(soi, spans = c(7,7), taper = 0)
spectrum(soi, spans = c(15, 15), taper = 0)
spectrum(soi, taper = 0)
spectrum(soi, spans = c(3, 3), taper = 0)
spectrum(soi, spans = 5, taper = 0)
spectrum(soi, taper = 0)
spectrum(soi, taper = 0)
spectrum(soi, spans = 5, taper = 0)
spectrum(soi, spans = 10, taper = 0)
spectrum(soi, spans = 20, taper = 0)
spectrum(soi, spans = 50, taper = 0)
spectrum(soi, taper = 0)
spectrum(soi, spans = 5, taper = 0)
spectrum(soi, spans = 10, taper = 0)
spectrum(soi, spans = 20, taper = 0)
spectrum(soi, spans = 10, taper = 0)
spectrum(soi, spans = 20, taper = 0)
spectrum(soi, spans = 15, taper = 0)
spectrum(soi, spans = 23, taper = 0)
spectrum(soi, spans = 15, taper = 0)
spectrum(soi, spans = 15, taper = 0)
spectrum(soi, spans = 15, taper = 0)
log(flow_df$flow)
flow_log
flow_log
attach(flow_df)
flow_log <- log(flow)
flow_log
log(flow_df$flow)
flow_log
log(flow_df$flow)
flow_log.lm <- lm(flow_log ~ time)
flow_log.lm
spectrum(flow_log.lm$residuals)
spectrum(flow_log.lm$residuals, spans = 15, taper = 0)
spectrum(flow_log.lm$residuals, spans = 15, taper = 0)
spectrum(flow_log, spans = 15, taper = 0)
plot(flow_log.lm$residuals)
plot(flow_log.lm)
fit <- predict(flow_log, flow_log.lm)
flow_log
fit <- predict(flow_df, flow_log.lm$)
fit <- predict(flow_df, flow_log.lm)
flow_df
flow_log
attach(flow_df)
fit <- lm(flow_log ~ time)
fit$residuals
plot(fit)
spectrum(fit$residuals, spans = 15, taper = 0)
fit <- lm(flow_log ~ time, method = "loess")
fit <- lm(flow_log ~ time, method = "loes")
?lm
fit <- lm(flow_log ~ time, method = c("loess"))
fit <- lm(flow_log ~ time, method = "loess")
attach(flow_df)
fit <- lm(flow_log ~ time, method = "loess")
fit <- loess(flow_log ~ time, method = "loess")
fit$residuals
plot(fit)
spectrum(fit$residuals, spans = 15, taper = 0)
spectrum(flow_log, spans = 15, taper = 0)
spectrum(fit$residuals, spans = 50, taper = 0)
attach(flow_df)
fit <- loess(flow_log ~ time, method = "loess")
fit$residuals
plot(fit)
spectrum(fit$residuals, spans = 15, taper = 0)
spectrum(flow_log, spans = 15, taper = 0)
spectrum(fit$residuals, spans = 15, taper = 0)
layout(2,1)
spectrum(fit$residuals, spans = 15, taper = 0)
layout(1,2)
spectrum(fit$residuals, spans = 15, taper = 0)
spectrum(flow_log, spans = 15, taper = 0)
spectrum(fit$residuals, spans = 15, taper = 0)
spectrum(flow_log, spans = 15, taper = 0)
par(1,2)
par(mfrow = c(1,2))
spectrum(fit$residuals, spans = 15, taper = 0)
par(mfrow = c(1,2))
spectrum(flow_log, spans = 15, taper = 0)
spectrum(fit$residuals, spans = 15, taper = 0)
par(mfrow = c(2,1))
spectrum(flow_log, spans = 15, taper = 0)
spectrum(fit$residuals, spans = 15, taper = 0)
decompose(flow_log)
decompose(flow_log)
?decompose
decompose(ts(flow_log))
as.ts(flow_log)
decompose(as.ts(flow_log))
ts(flow_log, start = 1, frequency = 1)
ts(flow_log, start = 1, frequency = 1)
flow_log_ts <- ts(flow_log, start = 1, frequency = 1)
decompose(flow_log_ts)
flow_log_ts <- ts(flow_log, start = 1, frequency = 1)
str(flow_log_ts)
decompose(x = flow_log_ts)
m <- decompose(x = flow_log_ts)
flow_log_ts <- ts(flow_log, start = 1, frequency = 1)
str(flow_log_ts)
fit <- loess(flow_log ~ time, method = "loess")
fit$residuals
plot(flow_log)
plot(flow_log_ts)
par(mfrow = c(1,1))
plot(flow_log_ts)
lines(fit$fitted)
plot(fit$residuals)
plot(fit$residuals, type = "l")
plot(flow_log_ts)
plot(fit$residuals, type = "l")
lines(fit$fitted)
plot(fit$residuals, type = "l")
lines(fit$fitted)
plot(flow_log_ts)
lines(fit$fitted)
plot(fit$residuals, type = "l")
par(mfrow = c(1,2))
plot(flow_log_ts)
lines(fit$fitted)
plot(fit$residuals, type = "l")
par(mfrow = c(2,1))
plot(flow_log_ts)
lines(fit$fitted)
plot(fit$residuals, type = "l")
par(mfrow = c(2,1))
spectrum(flow_log, spans = 15, taper = 0)
spectrum(fit$residuals, spans = 15, taper = 0)
x <- w <- 1:1000
x <- w <- 1:1024
for (t in 2:1024) x[t]<- w[t]
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
set.seed(1)
x <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
for (t in 2:1024) y[t]<- x[t] + 50
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
spectrum(y, span = 51, log = c("no"))
x <- y <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
for (t in 2:1024) y[t]<- x[t] + 50
layout(1:3)
plot(as.ts(x))
acf(x)
spectrum(x, span = 51, log = c("no"))
spectrum(y, span = 51, log = c("no"))
layout(1:3)
plot(as.ts(x))
spectrum(x, span = 51, log = c("no"))
spectrum(y, span = 51, log = c("no"))
x <- y <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
for (t in 2:1024) y[t]<- x[t] + 5000
layout(1:3)
plot(as.ts(x))
spectrum(x, span = 51, log = c("no"))
spectrum(y, span = 51, log = c("no"))
x <- y <- w <- rnorm(1024)
for (t in 2:1024) x[t]<- 0.9 * x[t-1] + w[t]
for (t in 2:1024) y[t]<- x[t] + 500
layout(1:3)
plot(as.ts(x))
spectrum(x, span = 51, log = c("no"))
spectrum(y, span = 51, log = c("no"))
fit_harm <- lm(flow_log ~ time + periodic(time, frequency = 1, order = 3) +
periodic(time, freq = 1/4, order = 1), data = flow_log)
par(mfrow = c(1,1))
fit_harm <- lm(fit$residuals ~ time + periodic(time, frequency = 1, order = 3) + periodic(time, freq = 1/4, order = 1), data = flow_log)
spectrum(fit$residuals, spans = 15, taper = 0)
library(ggplot2)
load(url("http://www.stat.pitt.edu/stoffer/tsa3/tsa3.rda"))
source(url("http://stat565.cwick.co.nz/code/fortify-ts.r"))
source(url("http://stat565.cwick.co.nz/code/get_acf.R"))
soi_df <- fortify(soi)
periodic <- function(x, frequency = 1, order = 1){
do.call(cbind, lapply(1:order, function(ord){
cbind(cos(2*pi*ord*frequency*x), sin(2*pi*ord*frequency*x))
}))
}
periodic <- function(x, frequency = 1, order = 1){
do.call(cbind, lapply(1:order, function(ord){
cbind(cos(2*pi*ord*frequency*x), sin(2*pi*ord*frequency*x))
}))
}
fit_harm <- lm(fit$residuals ~ time + periodic(time, frequency = 1, order = 3) + periodic(time, freq = 1/4, order = 1), data = flow_log)
spectrum(soi_df$x, taper = 0, span = c(5, 5))
abline(v = c(1/12, 1/48))
abline(v = c(1/12, 2/12, 3/12, 4/12), col = "#9E0142")
qplot(time, soi, data = soi_df, geom = "line")
qplot(time %% 1, x, data = soi_df, geom = "line",
group = time %/% 1) + xlab("Time of year")
qplot(time %% 1, x, data = soi_df, geom = "line",
group = time %/% 1) +
geom_smooth(aes(group = 1), method = "lm",
formula = y ~ periodic(x, frequency = 1, order = 1))
fit_harm <- lm(x ~ time + periodic(time, frequency = 1, order = 3) +
periodic(time, freq = 1/4, order = 1), data = soi_df)
soi_df$res <- residuals(fit_harm)
qplot(time, res, data = soi_df, geom = "line") + geom_smooth()
qplot(time %% 1, res, data = soi_df, geom = "line", group = time%/% 1)
examine_corr(soi_df$res)
# still temporal correlation
library(nlme)
fit_gls <- gls(x ~ time + periodic(time, frequency = 1, order = 3) +
periodic(time, freq = 1/4, order = 1), data = soi_df,
correlation = corARMA(p = 1, q = 1))
examine_corr(residuals(fit_gls, type = "normalized"))
summary(fit_gls)
# be careful with these p-values, we did some model selection by choosing the
# harmonic components with large power.
qplot(time, soi, data = soi_df) +
geom_line(aes(y = fitted(fit_gls)))
spectrum(arima.sim(model = list(ar = 0.86, ma = -0.57), 500), span = c(7,7))
